version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      target: production
    container_name: medical-chatbot-api
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
    env_file:
      - ./backend/.env
    volumes:
      # Mount data directory for PDF files
      - ./backend/data:/app/data:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medical-chatbot-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      target: production
    container_name: medical-chatbot-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medical-chatbot-network
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: medical-chatbot-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medical-chatbot-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: medical-chatbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    networks:
      - medical-chatbot-network
    profiles:
      - production

volumes:
  redis_data:
    driver: local

networks:
  medical-chatbot-network:
    driver: bridge
    name: medical-chatbot-network
